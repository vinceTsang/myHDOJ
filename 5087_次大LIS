/**
 * 求一个数组的所有不同子串中的“次大”LIS，输出相应的长度
 * 1 4 3答案是2，因为"1 4"和"1 3"为最大的两个子串。
 * 注意不是求长度中的次大
 * dp[i][0]表最长，dp[i][1]表次长
 * 对所有j<i，i的最长仅由j的最长所更新
 * 而i的次长由下面三者之一的max:
 * 1） 更新dp[i][0]后的dp[i][0]的原值
 * 2） dp[j][0]
 * 3） dp[j][1]
 */
#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
int a[1005],dp[1005][2],i,j,T,n,ans,MAX;
int main()
{
    scanf("%d",&T);
    while(T--){
        scanf("%d",&n);
        for(i=1;i<=n;i++) scanf("%d",&a[i]);
        MAX=1;
        ans=0;
        dp[1][0]=1; dp[1][1]=0;
        for(i=2;i<=n;i++){
            dp[i][0]=1; dp[i][1]=0;
            for(j=1;j<i;j++){
                if(a[j]<a[i]){
                    if(dp[j][0]+1>dp[i][0]){
                        dp[i][1]=dp[i][0]; //次大更新为原最大
                        dp[i][0]=dp[j][0]+1; //最大更新为新最大
                    }else if(dp[j][0]+1>dp[i][1]){ //前者的最大不大于自身的最大，却大于自身的次大
                        dp[i][1]=dp[j][0]+1; //仅更新次大
                    }

                    /*if(dp[j][1]+1>dp[i][0]){
                        dp[i][1]=dp[i][0];
                        dp[i][0]=dp[j][1]+1;
                    }else */
                    //该if冗余。因为必定dp[j][0]>=dp[j][1]
                    //如果dp[j][1]大于原本的dp[i][0]
                    //则此前dp[i][0]必定先被dp[j][0]更新了，导致此处if冗余
                    
                    if(dp[j][1]+1>dp[i][1]){
                        dp[i][1]=dp[j][1]+1;
                    }
                }
            }
            if(dp[i][0]==MAX)
                ans=max(ans,dp[i][0]);
            else{
                ans=max(ans,dp[i][1]);
                MAX=max(MAX,dp[i][0]);
            }
        }
        printf("%d\n",ans);
    }
    return 0;
}
